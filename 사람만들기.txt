#include <iostream>

using namespace std;


//동적배열 문법 int arr = new int[10];
//arr[0] = 1;
//arr[1] = 2;

//delete[] arr; <- 배열에 쓰인 메모리삭제

class 사람 {
public:
  static int 사람수;


  int 번호;
  사람() {
    번호 = 사람수 + 1;
    cout << 번호 << "번째 사람이 태어났습니다." << endl;
    사람수++;
  }

  ~사람() {
    cout << 번호 << "번째 사람이 삭제되었습니다." << endl;
  }
};

// static 속성 초기화
// 타입을 붙여야 합니다.
int 사람::사람수 = 0;


int main() {
  cout << "== 사람1 생성 ==" << endl;
  사람 a사람1; // 이렇게 하면 객체가 지역변수로 만들어지기 때문에 delete를 안해도 됩니다.

  cout << "== 사람들1 생성(동적, 객체 레퍼런스 배열, delete[] 필요) ==" << endl;


  사람** 사람들1 = new 사람*[3];



  cout << "== 사람들2 생성(정적, 객체 레퍼런스 배열, 알아서 삭제됨) ==" << endl;

  //cout << "== 사람들3 생성(동적, 객체 레퍼런스 배열, delete[] 필요) ==" << endl;

 // cout << "== 사람들4 생성(정적, 객체 레퍼런스 배열, 알아서 삭제됨) ==" << endl;

  cout << "== 사람들5 생성(동적, 객체 배열, delete[] 필요) ==" << endl;

  cout << "== 사람들6 생성(정적, 객체 배열, 알아서 삭제됨, 당연히 내부 객체마저도 알아서 삭제됨) ==" << endl;

}